apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename);
        }
    } else {
        print(filename + " does not exist!")
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")

def keystoreProperties = new Properties()

keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file("$rootDir/${keystoreProperties['storeFile']}")
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion compile_sdk
    defaultConfig {
        applicationId "com.ratik.uttam"
        minSdkVersion min_sdk
        targetSdkVersion target_sdk
        versionCode version_code
        versionName version_name

        buildConfigField "String", "CLIENT_ID", "\"${getProperty("local.properties", "client_id")}\""
    }

    buildTypes {
        release {
            8
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"

    productFlavors {
        dev {
            applicationId "com.ratik.uttam.dev"
        }
        prod {
            applicationId "com.ratik.uttam.prod"
        }
    }
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // AppCompat
    implementation "com.android.support:appcompat-v7:$support_library"
    implementation "com.android.support:design:$support_library"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_converter_gson"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:$rxjava2"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid"
    implementation "com.jakewharton.rxbinding2:rxbinding:$rxbinding2"

    // RxPermissions
    implementation "com.tbruyelle.rxpermissions2:rxpermissions:$rxpermissions"

    // Dagger 2
    implementation "com.google.dagger:dagger:$dagger2"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_compiler"

    // App Tour
    implementation "com.vlonjatg.android:app-tour:$app_tour"

    // Butter Knife
    implementation "com.jakewharton:butterknife:$butterknife"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknife"

    // Billing
    prodImplementation "org.solovyev.android:checkout:$checkout"

    // Firebase
    prodImplementation "com.google.firebase:firebase-core:$firebase_core"
    prodImplementation "com.google.firebase:firebase-ads:$firebase_ads"
    prodImplementation "com.google.firebase:firebase-config:$firebase_config"

    // Testing
    testImplementation "junit:junit:$junit"
    testImplementation "org.mockito:mockito-core:$mockito"
}

apply plugin: 'com.google.gms.google-services'