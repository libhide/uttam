apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename);
        }
    } else {
        print(filename + " does not exist!")
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")

def keystoreProperties = new Properties()

keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file("$rootDir/${keystoreProperties['storeFile']}")
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdk 32

    defaultConfig {
        applicationId "com.ratik.uttam.prod"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 21
        versionName "4.4"

        buildConfigField "String", "CLIENT_ID", "\"${getProperty("local.properties", "client_id")}\""
    }
    buildTypes {
        release {
            8
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    namespace 'com.ratik.uttam'
}

dependencies {
    // Kotlin
    implementation(libs.kotlin.stdlib)

    // AppCompat
    implementation(libs.appcompat)
    implementation(libs.vectordrawable.animated)
    implementation(libs.media)
    implementation(libs.legacy.support)
    implementation(libs.material)

    // Okhttp
    implementation(libs.okhttp.logging.inspector)

    // Retrofit
    implementation(libs.retrofit)
    implementation(libs.retrofit.converter.gson)
    implementation(libs.retrofit.adpater.rxjava)

    // Rx
    implementation(libs.rxjava)
    implementation(libs.rxandroid)
    implementation(libs.rxbinding)

    // RxPermissions
    implementation(libs.rxpermissions)

    // DI
    implementation(libs.dagger)
    annotationProcessor(libs.dagger.compiler)

    // App Tour
    implementation(libs.app.tour)

    // Butter Knife
    implementation(libs.butterknife)
    annotationProcessor(libs.butterknife.compiler)

    // Firebase
    implementation(libs.firebase.core)
    implementation(libs.firebase.config)

    // Testing
    testImplementation(libs.junit)
    testImplementation(libs.mockito)
}

apply plugin: 'com.google.gms.google-services'